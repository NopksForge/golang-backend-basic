// Code generated by MockGen. DO NOT EDIT.
// Source: training/app/user (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination app/user/mock.go -package=user training/app/user Repository
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"
	persistence "training/persistence"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, userId)
}

// InsertToDB mocks base method.
func (m *MockRepository) InsertToDB(ctx context.Context, model persistence.User) (*persistence.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertToDB", ctx, model)
	ret0, _ := ret[0].(*persistence.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertToDB indicates an expected call of InsertToDB.
func (mr *MockRepositoryMockRecorder) InsertToDB(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertToDB", reflect.TypeOf((*MockRepository)(nil).InsertToDB), ctx, model)
}

// InsertToKafka mocks base method.
func (m *MockRepository) InsertToKafka(model persistence.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertToKafka", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertToKafka indicates an expected call of InsertToKafka.
func (mr *MockRepositoryMockRecorder) InsertToKafka(model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertToKafka", reflect.TypeOf((*MockRepository)(nil).InsertToKafka), model)
}

// SelectById mocks base method.
func (m *MockRepository) SelectById(ctx context.Context, userId uuid.UUID) (*persistence.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectById", ctx, userId)
	ret0, _ := ret[0].(*persistence.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectById indicates an expected call of SelectById.
func (mr *MockRepositoryMockRecorder) SelectById(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectById", reflect.TypeOf((*MockRepository)(nil).SelectById), ctx, userId)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, model persistence.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, model)
}
